version: '3.8'

services:
  # Note: Using external database containers
  # PostgreSQL runs on localhost:15432 with password 'postgres'
  # Redis runs on localhost:16379 with password '123456'

  relay-station:
    build: .
    container_name: relay-station
    environment:
      # Application
      APP_ENV: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      
      # Database (External PostgreSQL Container)
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@host.docker.internal:15432/relay_station
      
      # Redis (External Redis Container)
      REDIS_URL: redis://:123456@host.docker.internal:16379/0
      
      # Upstream API (configure your third-party API here)
      UPSTREAM_API_URL: ${UPSTREAM_API_URL:-https://api.anthropic.com/v1}
      UPSTREAM_API_KEY: ${UPSTREAM_API_KEY}
      
      # Admin
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./config.yaml:/app/config.yaml:ro
    networks:
      - relay_network
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: relay-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - relay_network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: relay-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - relay_network
    restart: unless-stopped

networks:
  relay_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: